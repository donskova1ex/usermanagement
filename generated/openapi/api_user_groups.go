// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger user management service - OpenAPI 3.0
 *
 * This is a sample User management server based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserGroupsAPIController binds http requests to an api service and writes the service results to the http response
type UserGroupsAPIController struct {
	service      UserGroupsAPIServicer
	errorHandler ErrorHandler
}

// UserGroupsAPIOption for how the controller is set up.
type UserGroupsAPIOption func(*UserGroupsAPIController)

// WithUserGroupsAPIErrorHandler inject ErrorHandler into controller
func WithUserGroupsAPIErrorHandler(h ErrorHandler) UserGroupsAPIOption {
	return func(c *UserGroupsAPIController) {
		c.errorHandler = h
	}
}

// NewUserGroupsAPIController creates a default api controller
func NewUserGroupsAPIController(s UserGroupsAPIServicer, opts ...UserGroupsAPIOption) *UserGroupsAPIController {
	controller := &UserGroupsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserGroupsAPIController
func (c *UserGroupsAPIController) Routes() Routes {
	return Routes{
		"GetAllUserGroups": Route{
			strings.ToUpper("Get"),
			"/api/v1/users-groups",
			c.GetAllUserGroups,
		},
		"GetUserGroupsByUserId": Route{
			strings.ToUpper("Get"),
			"/api/v1/user-groups/{userid}",
			c.GetUserGroupsByUserId,
		},
		"EditUserGroupByUserID": Route{
			strings.ToUpper("Put"),
			"/api/v1/user-groups/{userid}",
			c.EditUserGroupByUserID,
		},
	}
}

// GetAllUserGroups - Provides a list of user groups
func (c *UserGroupsAPIController) GetAllUserGroups(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllUserGroups(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserGroupsByUserId - Find user-groups by userID
func (c *UserGroupsAPIController) GetUserGroupsByUserId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	useridParam := params["userid"]
	if useridParam == "" {
		c.errorHandler(w, r, &RequiredError{"userid"}, nil)
		return
	}
	result, err := c.service.GetUserGroupsByUserId(r.Context(), useridParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EditUserGroupByUserID - edit user group by userID
func (c *UserGroupsAPIController) EditUserGroupByUserID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	useridParam := params["userid"]
	if useridParam == "" {
		c.errorHandler(w, r, &RequiredError{"userid"}, nil)
		return
	}
	userGroupsParam := []UserGroups{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userGroupsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range userGroupsParam {
		if err := AssertUserGroupsRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.EditUserGroupByUserID(r.Context(), useridParam, userGroupsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
