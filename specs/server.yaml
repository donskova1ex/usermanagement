openapi: 3.0.0
info:
  title: Swagger user management service - OpenAPI 3.0
  description: |-
    This is a sample User management server based on the OpenAPI 3.0 specification.
  version: 1.0.0
servers:
  - url: https://user-management.swagger.io/api/v1
tags:
  - name: users
    description: Everything about users
  - name: roles
    description: Everything about roles
  - name: user-roles
    description: Everything about user-roles
paths:
  /users:
    get:
      tags:
        - users
      summary: Provides a list of users
      operationId: getAllUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        '404':
          description: Users not found
  /users/{id}:
    get:
      tags:
        - users
      summary: Find user by ID
      description: Returns a single User
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID of user to returns
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: edit user by ID
      description: Returns a change user
      operationId: editUserByID
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      parameters:
        - name: id
          in: path
          description: ID of user changing
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not changing
    delete:
      tags:
        - users
      summary: delete user by ID
      description: delete user
      operationId: deleteUserByID
      parameters:
        - name: id
          in: path
          description: ID of user deleting
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not deleting
  /roles:
    get:
      tags:
        - roles
      summary: Provides a list of roles
      operationId: getAllRoles
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/role'
        '404':
          description: Users not found
  /roles/{id}:
    get:
      tags:
        - roles
      summary: Find role by ID
      description: Returns a single role
      operationId: getRoleById
      parameters:
        - name: id
          in: path
          description: ID of role to returns
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '400':
          description: Invalid ID supplied
        '404':
          description: Role not found
    put:
      tags:
        - roles
      summary: edit role by ID
      description: Returns a change role
      operationId: editRoleByID
      requestBody:
        description: Update an existent role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role'
        required: true
      parameters:
        - name: id
          in: path
          description: ID of role changing
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '400':
          description: Invalid ID supplied
        '404':
          description: Role not changing
    delete:
      tags:
        - roles
      summary: delete role by ID
      description: delete role
      operationId: deleteRoleByID
      parameters:
        - name: id
          in: path
          description: ID of role deleting
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Role not deleting
  /user-roles/{userid}:
    get:
      tags:
        - user-roles
      summary: Find user-roles by userID
      description: Returns user roles
      operationId: getUserRolesByUserId
      parameters:
        - name: userid
          in: path
          description: ID of user to returns
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user_role'
        '400':
          description: Invalid ID supplied
        '404':
          description: User roles not found
    put:
      tags:
        - user-roles
      summary: edit user role by userID
      description: Returns a change user roles
      operationId: editUserRolesByUserID
      requestBody:
        description: Update an existent user roles
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/user_role'
        required: true
      parameters:
        - name: userid
          in: path
          description: ID of user changing
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Invalid ID supplied
        '404':
          description: User role not changing


components: 
  schemas:
    user:
      type: object
      properties: 
        Id:
          type: string
          example: f7dabcd1-df8b-4fe6-9666-bf123782593e
        UserName:
          type: string
          example: Ivanov.I
        FirstName:
          type: string
          example: Ivan
        LastName:
          type: string
          example: Ivanov
        FullName:
          type: string
          example: Ivan Ivanov
        Email:
          type: string
          example: ivanov_i@example.com
        UserGroupId:
          type: integer
          format: int64
          example: 1
        Active:
          type: boolean
          example: true
        Deleted:
          type: boolean
          example: false
    role:
      type: object
      properties:
        id:
          type: string
          example: 1dr456h8-df8b-4fe6-9666-1aq5we9rt2y6
        name:
          type: string
          example: viewing the contract
        reading:
          type: boolean
          example: false
        changing:
          type: boolean
          example: false
        viewing:
          type: boolean
          example: true
        activity:
          type: boolean
          example: true
    user_role:
      type: object
      properties:
        userId:
          type: string
          example: f7dabcd1-df8b-4fe6-9666-bf123782593e
        roleId:
          type: string
          example: 1dr456h8-df8b-4fe6-9666-1aq5we9rt2y6
        active:
          type: boolean
          example: true


