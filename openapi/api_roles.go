// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger user management service - OpenAPI 3.0
 *
 * This is a sample User management server based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RolesAPIController binds http requests to an api service and writes the service results to the http response
type RolesAPIController struct {
	service      RolesAPIServicer
	errorHandler ErrorHandler
}

// RolesAPIOption for how the controller is set up.
type RolesAPIOption func(*RolesAPIController)

// WithRolesAPIErrorHandler inject ErrorHandler into controller
func WithRolesAPIErrorHandler(h ErrorHandler) RolesAPIOption {
	return func(c *RolesAPIController) {
		c.errorHandler = h
	}
}

// NewRolesAPIController creates a default api controller
func NewRolesAPIController(s RolesAPIServicer, opts ...RolesAPIOption) *RolesAPIController {
	controller := &RolesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RolesAPIController
func (c *RolesAPIController) Routes() Routes {
	return Routes{
		"GetAllRoles": Route{
			strings.ToUpper("Get"),
			"/api/v1/roles",
			c.GetAllRoles,
		},
		"GetRoleById": Route{
			strings.ToUpper("Get"),
			"/api/v1/roles/{id}",
			c.GetRoleById,
		},
		"EditRoleByID": Route{
			strings.ToUpper("Put"),
			"/api/v1/roles/{id}",
			c.EditRoleByID,
		},
		"DeleteRoleByID": Route{
			strings.ToUpper("Delete"),
			"/api/v1/roles/{id}",
			c.DeleteRoleByID,
		},
	}
}

// GetAllRoles - Provides a list of roles
func (c *RolesAPIController) GetAllRoles(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllRoles(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRoleById - Find role by ID
func (c *RolesAPIController) GetRoleById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetRoleById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EditRoleByID - edit role by ID
func (c *RolesAPIController) EditRoleByID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	roleParam := Role{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&roleParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRoleRequired(roleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRoleConstraints(roleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EditRoleByID(r.Context(), idParam, roleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteRoleByID - delete role by ID
func (c *RolesAPIController) DeleteRoleByID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteRoleByID(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
