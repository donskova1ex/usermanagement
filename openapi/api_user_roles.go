// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger user management service - OpenAPI 3.0
 *
 * This is a sample User management server based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserRolesAPIController binds http requests to an api service and writes the service results to the http response
type UserRolesAPIController struct {
	service      UserRolesAPIServicer
	errorHandler ErrorHandler
}

// UserRolesAPIOption for how the controller is set up.
type UserRolesAPIOption func(*UserRolesAPIController)

// WithUserRolesAPIErrorHandler inject ErrorHandler into controller
func WithUserRolesAPIErrorHandler(h ErrorHandler) UserRolesAPIOption {
	return func(c *UserRolesAPIController) {
		c.errorHandler = h
	}
}

// NewUserRolesAPIController creates a default api controller
func NewUserRolesAPIController(s UserRolesAPIServicer, opts ...UserRolesAPIOption) *UserRolesAPIController {
	controller := &UserRolesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserRolesAPIController
func (c *UserRolesAPIController) Routes() Routes {
	return Routes{
		"GetUserRolesByUserId": Route{
			strings.ToUpper("Get"),
			"/api/v1/user-roles/{userid}",
			c.GetUserRolesByUserId,
		},
		"EditUserRolesByUserID": Route{
			strings.ToUpper("Put"),
			"/api/v1/user-roles/{userid}",
			c.EditUserRolesByUserID,
		},
	}
}

// GetUserRolesByUserId - Find user-roles by userID
func (c *UserRolesAPIController) GetUserRolesByUserId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	useridParam := params["userid"]
	if useridParam == "" {
		c.errorHandler(w, r, &RequiredError{"userid"}, nil)
		return
	}
	result, err := c.service.GetUserRolesByUserId(r.Context(), useridParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EditUserRolesByUserID - edit user role by userID
func (c *UserRolesAPIController) EditUserRolesByUserID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	useridParam := params["userid"]
	if useridParam == "" {
		c.errorHandler(w, r, &RequiredError{"userid"}, nil)
		return
	}
	userRoleParam := []UserRole{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userRoleParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range userRoleParam {
		if err := AssertUserRoleRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.EditUserRolesByUserID(r.Context(), useridParam, userRoleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
